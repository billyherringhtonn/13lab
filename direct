Діаграма класів програми 

  +-------------------------+       +--------------------+       +--------------+
  |         Subject         |       |      Observer      |       |    Display   |
  +-------------------------+       +--------------------+       +--------------+
  | + attach(observer)      |       | + update(temp, hum) |       | + show(temp) |
  | + detach(observer)      |       +--------------------+       +--------------+
  | + notify_observers()    |
  +-------------------------+
              /|\
               |
               |
  +-------------------------+                   
  |      ConcreteSubject     |
  +-------------------------+
  | - temperature : float    |
  | - humidity : float       |
  | - observers : list       |
  +-------------------------+
  | + get_temperature()     |
  | + get_humidity()        |
  | + set_temperature(temp) |
  | + set_humidity(hum)     |
  +-------------------------+
              /|\
               |
               |
  +-------------------------+
  |    ConcreteObserver      |
  +-------------------------+
  | - display : Display      |
  +-------------------------+
  | + update(temp, hum)     |
  +-------------------------+
               |
       +-------------------+
       |   PostalOffice    |
       +-------------------+
       | +addDelivery()    |
       | +notifyOrders()   |
       +-------------------+
                 ^  
                 |  
      +----------+---------+
      |                    |
+------------+      +------------+
|  Order     |      |   Order    |
+------------+      +------------+
| -status    |      | -status   |
| +update()  |      | +update() |
+------------+      +------------+

Для реалізації програми з візуальним інтерфейсом, яка дозволяє використовувати паттерн Наглядач, можна використовувати бібліотеку PyQt. 
Приклад програми нижче показує, як створити вікно з кнопкою, яка генерує подію, та декількома об'єктами-спостерігачами, які реагують на цю подію:
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton
from PyQt5.QtCore import pyqtSignal, QObject


class Subject(QObject):
    stateChanged = pyqtSignal(str)


class Observer:
    def __init__(self, name):
        self.name = name

    def update(self, message):
        print(f"{self.name} received message: {message}")


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.subject = Subject()
        self.observers = [Observer("Observer 1"), Observer("Observer 2")]
        self.init_ui()

    def init_ui(self):
        button = QPushButton("Press me", self)
        button.move(50, 50)
        button.clicked.connect(self.on_button_click)

    def on_button_click(self):
        self.subject.stateChanged.emit("Button clicked")
        self.notify_observers("Button clicked")

    def notify_observers(self, message):
        for observer in self.observers:
            observer.update(message)


if __name__ == "__main__":
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec_()
Ця програма створює вікно з кнопкою, яка генерує подію, коли на неї натиснуто. При натисканні кнопки генерується сигнал stateChanged, який є суб'єктом спостереження.
Кожен з об'єктів-спостерігачів підписується на цей сигнал у конструкторі. Коли сигнал генерується, кожен з спостерігачів отримує повідомлення через метод update. 
У прикладі, метод update просто виводить повідомлення в консоль.

Щодо гри доставки товару, паттерн Наглядач можна використовувати для реалізації механізму повідомлень про стан доставки. 
Коли товар приходить на пошту для доставки, створюється об'єкт "замовлення", яке містить інформацію про адресата та товар.
Об'єкт "замовлення" підписується на об'єкт "поштовий відділ" як 
Наглядач (Observer) для отримання повідомлень про нові доставки.
Коли на пошту надходить нова посилка для клієнта, поштовий відділ повідомляє про це всіх замовлень, які очікують на доставку. 
Кожне замовлення, яке очікує на доставку, може здійснювати інші дії, наприклад, змінювати свій статус.
На діаграмі класів представлений таким чином:
       +-------------------+
       |   PostalOffice    |
       +-------------------+
       | +addDelivery()    |
       | +notifyOrders()   |
       +-------------------+
                 ^  
                 |  
      +----------+---------+
      |                    |
+------------+      +------------+
|  Order     |      |   Order    |
+------------+      +------------+
| -status    |      | -status   |
| +update()  |      | +update() |
+------------+      +------------+
У цьому прикладі, PostalOffice є відповідальним за додавання нових доставок, а також повідомлення всіх замовлень, які очікують на доставку. 
Order виступає як Наглядач і підписується на PostalOffice, щоб отримувати повідомлення про нові доставки.
Кожне замовлення може мати свій статус і здійснювати дії з його зміни. 
При отриманні повідомлення про нову доставку, замовлення може змінити свій статус відповідно до стану доставки.
